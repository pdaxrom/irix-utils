diff -Nur mc-4.8.0/lib/strutil/strutil8bit.c mc-4.8.0-irix/lib/strutil/strutil8bit.c
--- mc-4.8.0/lib/strutil/strutil8bit.c	2011-10-18 11:39:19.000000000 +0000
+++ mc-4.8.0-irix/lib/strutil/strutil8bit.c	2025-04-27 06:21:52.058984479 +0000
@@ -34,6 +34,10 @@
 #include "lib/global.h"
 #include "lib/strutil.h"
 
+#ifndef isblank
+#define isblank(c) ((c) == ' ' || (c) == '\t')
+#endif
+
 /* functions for singlebyte encodings, all characters have width 1
  * using standard system functions
  * there are only small differences between functions in strutil8bit.c 
diff -Nur mc-4.8.0/lib/tty/tty-ncurses.c mc-4.8.0-irix/lib/tty/tty-ncurses.c
--- mc-4.8.0/lib/tty/tty-ncurses.c	2011-10-18 11:39:19.000000000 +0000
+++ mc-4.8.0-irix/lib/tty/tty-ncurses.c	2025-04-27 05:22:47.038482171 +0000
@@ -185,7 +185,7 @@
     cur_term->Nttyb.c_cc[VINTR] = CTRL ('g');   /* ^g */
     /* disable SIGQUIT to allow use Ctrl-\ key */
     cur_term->Nttyb.c_cc[VQUIT] = NULL_VALUE;
-    tcsetattr (cur_term->Filedes, TCSANOW, &cur_term->Nttyb);
+    tcsetattr (cur_term->Filedes, TCSANOW, (const struct termios *)&cur_term->Nttyb);
 
     tty_start_interrupt_key ();
 
diff -Nur mc-4.8.0/lib/util.c mc-4.8.0-irix/lib/util.c
--- mc-4.8.0/lib/util.c	2011-10-18 11:39:19.000000000 +0000
+++ mc-4.8.0-irix/lib/util.c	2025-04-27 06:22:25.704681129 +0000
@@ -56,6 +56,8 @@
 #include "lib/strutil.h"
 #include "lib/util.h"
 
+#define PRIuMAX "llu"
+
 /*** global variables ****************************************************************************/
 
 /*** file scope macro definitions ****************************************************************/
diff -Nur mc-4.8.0/lib/vfs/direntry.c mc-4.8.0-irix/lib/vfs/direntry.c
--- mc-4.8.0/lib/vfs/direntry.c	2011-10-19 11:30:59.000000000 +0000
+++ mc-4.8.0-irix/lib/vfs/direntry.c	2025-04-27 05:24:21.565383930 +0000
@@ -77,6 +77,8 @@
 #include "xdirentry.h"
 #include "gc.h"                 /* vfs_rmstamp */
 
+#define PRIuMAX "llu"
+
 /*** global variables ****************************************************************************/
 
 /*** file scope macro definitions ****************************************************************/
diff -Nur mc-4.8.0/lib/vfs/parse_ls_vga.c mc-4.8.0-irix/lib/vfs/parse_ls_vga.c
--- mc-4.8.0/lib/vfs/parse_ls_vga.c	2011-10-18 11:39:19.000000000 +0000
+++ mc-4.8.0-irix/lib/vfs/parse_ls_vga.c	2025-04-27 05:26:55.867488385 +0000
@@ -40,6 +40,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 
+#include <sys/types.h>
+#include <sys/mkdev.h>
+
 #include "lib/global.h"
 #include "lib/widget.h"         /* message() */
 
diff -Nur mc-4.8.0/src/vfs/fish/fish.c mc-4.8.0-irix/src/vfs/fish/fish.c
--- mc-4.8.0/src/vfs/fish/fish.c	2011-10-19 11:30:59.000000000 +0000
+++ mc-4.8.0-irix/src/vfs/fish/fish.c	2025-04-27 06:23:10.250603389 +0000
@@ -79,6 +79,8 @@
 #include "fish.h"
 #include "fishdef.h"
 
+#define PRIuMAX "llu"
+
 /*** global variables ****************************************************************************/
 
 int fish_directory_timeout = 900;
diff -Nur mc-4.8.0/src/vfs/ftpfs/ftpfs.c mc-4.8.0-irix/src/vfs/ftpfs/ftpfs.c
--- mc-4.8.0/src/vfs/ftpfs/ftpfs.c	2011-10-19 11:30:59.000000000 +0000
+++ mc-4.8.0-irix/src/vfs/ftpfs/ftpfs.c	2025-04-27 06:27:46.165313859 +0000
@@ -112,6 +112,8 @@
 
 #include "ftpfs.h"
 
+#define PRIuMAX "llu"
+
 /*** global variables ****************************************************************************/
 
 /* Delay to retry a connection */
@@ -187,6 +189,8 @@
 typedef int socklen_t;
 #endif
 
+#include "irix_net_addons.c"
+
 /* This should match the keywords[] array below */
 typedef enum
 {
@@ -1135,9 +1139,9 @@
     case AF_INET:
         ((struct sockaddr_in *) sa)->sin_port = port;
         break;
-    case AF_INET6:
-        ((struct sockaddr_in6 *) sa)->sin6_port = port;
-        break;
+//    case AF_INET6:
+//        ((struct sockaddr_in6 *) sa)->sin6_port = port;
+//        break;
     }
 
     return (connect (my_socket, (struct sockaddr *) sa, *salen) < 0) ? 0 : 1;
@@ -1185,10 +1189,10 @@
         af = FTP_INET;
         port = ((struct sockaddr_in *) &data_addr)->sin_port;
         break;
-    case AF_INET6:
-        af = FTP_INET6;
-        port = ((struct sockaddr_in6 *) &data_addr)->sin6_port;
-        break;
+//    case AF_INET6:
+//        af = FTP_INET6;
+//        port = ((struct sockaddr_in6 *) &data_addr)->sin6_port;
+//        break;
         /* Not implemented */
     default:
         return 0;
@@ -1265,9 +1269,9 @@
     case AF_INET:
         ((struct sockaddr_in *) data_addr)->sin_port = 0;
         break;
-    case AF_INET6:
-        ((struct sockaddr_in6 *) data_addr)->sin6_port = 0;
-        break;
+//    case AF_INET6:
+//        ((struct sockaddr_in6 *) data_addr)->sin6_port = 0;
+//        break;
     default:
         vfs_print_message (_("ftpfs: invalid address family"));
         ERRNOR (EINVAL, -1);
diff -Nur mc-4.8.0/src/vfs/ftpfs/irix_net_addons.c mc-4.8.0-irix/src/vfs/ftpfs/irix_net_addons.c
--- mc-4.8.0/src/vfs/ftpfs/irix_net_addons.c	1970-01-01 00:00:00.000000000 +0000
+++ mc-4.8.0-irix/src/vfs/ftpfs/irix_net_addons.c	2025-04-27 06:26:26.392663136 +0000
@@ -0,0 +1,177 @@
+// getaddrinfo_compat.c
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <netdb.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <unistd.h>
+#include <errno.h>
+
+/* Error values for `getaddrinfo' function.  */
+# define EAI_BADFLAGS	  -1	/* Invalid value for `ai_flags' field.  */
+# define EAI_NONAME	  -2	/* NAME or SERVICE is unknown.  */
+# define EAI_AGAIN	  -3	/* Temporary failure in name resolution.  */
+# define EAI_FAIL	  -4	/* Non-recoverable failure in name res.  */
+# define EAI_FAMILY	  -6	/* `ai_family' not supported.  */
+# define EAI_SOCKTYPE	  -7	/* `ai_socktype' not supported.  */
+# define EAI_SERVICE	  -8	/* SERVICE not supported for `ai_socktype'.  */
+# define EAI_MEMORY	  -10	/* Memory allocation failure.  */
+# define EAI_SYSTEM	  -11	/* System error returned in `errno'.  */
+# define EAI_OVERFLOW	  -12	/* Argument buffer overflow.  */
+# ifdef __USE_GNU
+#  define EAI_NODATA	  -5	/* No address associated with NAME.  */
+#  define EAI_ADDRFAMILY  -9	/* Address family for NAME not supported.  */
+#  define EAI_INPROGRESS  -100	/* Processing request in progress.  */
+#  define EAI_CANCELED	  -101	/* Request canceled.  */
+#  define EAI_NOTCANCELED -102	/* Request not canceled.  */
+#  define EAI_ALLDONE	  -103	/* All requests done.  */
+#  define EAI_INTR	  -104	/* Interrupted by a signal.  */
+#  define EAI_IDN_ENCODE  -105	/* IDN encoding failed.  */
+# endif
+
+typedef unsigned short sa_family_t;
+
+struct sockaddr_storage {
+    sa_family_t ss_family;   /* address family */
+    char _ss_pad[128 - sizeof(sa_family_t)]; /* padding to match modern size */
+};
+
+#ifndef NI_MAXHOST
+#define NI_MAXHOST 1025
+#endif
+
+#ifndef NI_MAXSERV
+#define NI_MAXSERV 32
+#endif
+
+#ifndef NI_NUMERICHOST
+#define NI_NUMERICHOST 1
+#endif
+
+#ifndef NI_NUMERICSERV
+#define NI_NUMERICSERV 2
+#endif
+
+struct addrinfo {
+    int ai_flags;
+    int ai_family;
+    int ai_socktype;
+    int ai_protocol;
+    size_t ai_addrlen;
+    struct sockaddr *ai_addr;
+    char *ai_canonname;
+    struct addrinfo *ai_next;
+};
+
+int getaddrinfo(const char *node, const char *service,
+                const struct addrinfo *hints,
+                struct addrinfo **res)
+{
+    struct hostent *he;
+    struct sockaddr_in *addr;
+    struct addrinfo *ai;
+    int port = 0;
+
+    if (!node && !service)
+        return EAI_NONAME;
+
+    if (service)
+        port = htons(atoi(service));
+
+    he = gethostbyname(node ? node : "localhost");
+    if (!he)
+        return EAI_FAIL;
+
+    ai = (struct addrinfo *)malloc(sizeof(struct addrinfo));
+    if (!ai)
+        return EAI_MEMORY;
+
+    memset(ai, 0, sizeof(struct addrinfo));
+
+    addr = (struct sockaddr_in *)malloc(sizeof(struct sockaddr_in));
+    if (!addr) {
+        free(ai);
+        return EAI_MEMORY;
+    }
+
+    memset(addr, 0, sizeof(struct sockaddr_in));
+    addr->sin_family = AF_INET;
+    addr->sin_port = port;
+    memcpy(&addr->sin_addr, he->h_addr_list[0], he->h_length);
+
+    ai->ai_family = AF_INET;
+    ai->ai_socktype = hints ? hints->ai_socktype : SOCK_STREAM;
+    ai->ai_protocol = hints ? hints->ai_protocol : 0;
+    ai->ai_addrlen = sizeof(struct sockaddr_in);
+    ai->ai_addr = (struct sockaddr *)addr;
+    ai->ai_canonname = NULL;
+    ai->ai_next = NULL;
+
+    *res = ai;
+    return 0;
+}
+
+void freeaddrinfo(struct addrinfo *res)
+{
+    if (res) {
+        if (res->ai_addr)
+            free(res->ai_addr);
+        if (res->ai_canonname)
+            free(res->ai_canonname);
+        free(res);
+    }
+}
+
+const char *gai_strerror(int errcode)
+{
+    switch (errcode) {
+        case 0: return "Success";
+        case EAI_NONAME: return "Name or service not known";
+        case EAI_MEMORY: return "Memory allocation failure";
+        case EAI_FAIL: return "Non-recoverable failure";
+        default: return "Unknown error";
+    }
+}
+
+int getnameinfo(const struct sockaddr *sa, socklen_t salen,
+                char *host, socklen_t hostlen,
+                char *serv, socklen_t servlen, int flags)
+{
+    if (!sa || salen == 0)
+        return EAI_FAIL;
+
+    if (sa->sa_family == AF_INET) {
+        const struct sockaddr_in *sin = (const struct sockaddr_in *)sa;
+
+        if (host && hostlen > 0) {
+            if (flags & NI_NUMERICHOST) {
+                const char *addr = inet_ntoa(sin->sin_addr);
+                if (!addr)
+                    return EAI_FAIL;
+                if (strlen(addr) >= hostlen)
+                    return EAI_OVERFLOW;
+                strcpy(host, addr);
+            } else {
+                // DNS lookup would happen here (but skip for IRIX 5.3)
+                return EAI_NONAME;
+            }
+        }
+
+        if (serv && servlen > 0) {
+            if (flags & NI_NUMERICSERV) {
+                int port = ntohs(sin->sin_port);
+                g_snprintf(serv, servlen, "%d", port);
+            } else {
+                // Service lookup would happen here (skip for IRIX 5.3)
+                return EAI_NONAME;
+            }
+        }
+
+        return 0;
+    }
+
+    // Only support AF_INET (IPv4) on IRIX 5.3
+    return EAI_FAMILY;
+}
diff -Nur mc-4.8.0/src/viewer/display.c mc-4.8.0-irix/src/viewer/display.c
--- mc-4.8.0/src/viewer/display.c	2011-10-18 11:39:19.000000000 +0000
+++ mc-4.8.0-irix/src/viewer/display.c	2025-04-27 06:28:25.780133524 +0000
@@ -55,6 +55,9 @@
 #include "internal.h"
 #include "mcviewer.h"
 
+#define PRIxMAX "llx"
+#define PRIuMAX "llu"
+
 /*** global variables ****************************************************************************/
 
 /*** file scope macro definitions ****************************************************************/
diff -Nur mc-4.8.0/src/viewer/hex.c mc-4.8.0-irix/src/viewer/hex.c
--- mc-4.8.0/src/viewer/hex.c	2011-10-18 11:39:19.000000000 +0000
+++ mc-4.8.0-irix/src/viewer/hex.c	2025-04-27 06:29:46.517803960 +0000
@@ -50,6 +50,8 @@
 
 #include "internal.h"
 
+#define PRIxMAX "llx"
+
 /*** global variables ****************************************************************************/
 
 /*** file scope macro definitions ****************************************************************/
